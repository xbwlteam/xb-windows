XBasic Library Code- Windows

CONTENTS
	Linking Libraries with The User Code
		Method One: DLL Files Created from the PDE
			Using the DLL Library Code in an XBasic Program
			Building and Running the Main Program
			Creating and Using C dll's
		Method Two: Building the Files from the Terminal
			Linking C Libraries
				Printing to the XBasic Console from C
			Compiling Libraries in with XBasic
	Using XBasic Source Files Directly

<h1>Linking Libraries with the User Code
	As well as using the PDE for compiling XBasic code, the user can maintain
	and use assembler source libraries created from XBasic code. 
	
<h2>Method One: DLL Files Created from the PDE
	Using the XBasic PDE create or load the XBasic Library source code.
	Functions to be exported should be placed in an EXPORT clause in the
	Prolog as:
	
	EXPORT
		DECLARE FUNCTION MyLibFunction()
		..
	END EXPORT
	
	Once the library is complete, use the PDE 
		Run/Library 
	option, which generates the assembler code and a make file and .dec file.
	Follow this by using the PDE 
		Run/nmake Standalone 
	option, which generates the .dll file (ie: MyLib.dll), .def and .lib files.
	
<h3>Using the DLL Library Code in an XBasic Program
	In your main program code Prolog, add the line
		IMPORT "MyLib"
	where the other import statements are.
	
	If the .dll and .dec files are present in the same directory as the
	main program OR they are in c:\xb\bin and c:\xb\include respectively
	then the main program will run correctly in the PDE
	
<h3>Building and Running the Main Program
	If the library .dll, .dec, .def and .lib files are present in the same 
	directory as the main program or they are present as:
		c:\xb\bin\MyLib.dll
		c:\xb\include\MyLib.dec
		c:\xb\lib\MyLib.lib
		c:\xb\lib\MyLib.def
		
	Then you can use the PDE options for the main program:
		Run/Assembler
		Run/nmake Standalone
	To build the executable MyProg.exe
	
	To run the program from the terminal you will either have to set the
	following environment variables (where the library files are in c:\xb):
		SET XBDIR=c:\xb
		PATH=c:\xb;c:\xb\bin;c:\Program Files (x86)\GnuWin32\bin;%PATH%
		SET INCLUDE=c:\xb\include;%INCLUDE%
		SET LIB=c:\xb\lib;%LIB%
	And then run the program.
	
	OR
	
	Have the library .dll, .dec, xb.dll and the .exe file in the same 
	directory. Note that xb.dll can be obtained by copying c:\xb\bin\xbrun.dll
	to the main program directory and then renaming it xb.dll
	If these files are present in the main program directory, 
	the program can be run from Windows Explorer by double clicking 
	the .exe file.
	
<h3>Creating and Using C dll's
	To create a C dll, first install Visual Studio with the C++ compiler
	option set.
	
	You can write your C code in any text editor, and use the DLL export
	convention to export functions as in the example below:
		__declspec(dllexport) int MyCDllFunction();
		
		__declspec(dllexport) int MyCDllFunction() {
			...
			return myInt;
		}
		
	(note that using stdio.h won't work in a dll)
		
	From Visual Studio use the menu option 
		Tools/Command Line/Developer Command Prompt
	This allows the use of the "cl" and "link" commands.
	Use the following to create the dll:
		cl /c /EHsc MyCdll.c
	This generates the file MyCdll.obj
	Then:
		link /DLL /NOLOGO /NOENTRY MyCdll.obj
	This generates the dll file.
	
	Use a text editor to create the MyCdll.dec file similar to as follows:
		EXTERNAL CFUNCTION XLONG MyCDllFunction()
		...
		
	For each function exported.
	
	Ensure that the .dec file and the .dll file are in the same directory
	as the XBasic main program that uses them.
	
	In the XBasic main program Prolog use the line
		IMPORT "MyCdll"
	With the other IMPORT statements.
	
	The program will now "know" about the MyCdll functions and the main
	program calls to the MyCdll functions can be tested in the PDE.
	
<h2>Method Two: Building the Files from the Terminal
	To set-up ensure that you have the Gnu make program installed from the 
	website.
	
	From the terminal, set the Windows environment variables as follows
		PATH=c:\xb;c:\xb\bin;c:\Program Files (x86)\GnuWin32\bin;%PATH%
		SET INCLUDE=c:\xb\include;%INCLUDE%
		SET LIB=c:\xb\lib;%LIB%
	
	For the functions which you wish to export from the library, create a
	.dec file in the same directory, this includes lines of text like:
		EXTERNAL FUNCTION MyLibFunction(myInt, myString$)
	Constants can also be exported
		$$MY_CONSTANT = 55
	Note that you can have the .dec file for a library .x file built automatically
	by using:
		EXPORT
			DECLARE FUNCTION MyLibFunction()
			..
		END EXPORT
	in the XBasic code.
	
	To create an assembler library in XBasic, use the PDE Run/Library 
	menu option.

	In the main XBasic program Prolog include the names of the library functions 
	to be used
		EXTERNAL FUNCTION MyLibFunction(myInt, myString$)
	Compile the program with the menu options Run/Assembler
	This generates a .mak file for the program, so that we 
	can build it using make.
	Copy the file 
		c:\xb\include\xbasic.mak
	To
		MyProgPath\MyProg1.mak
	Modify your MyProg.mak file as follows:
	After the line
		APP = MyProg
	Add the line
		MYLIB = MyLibProg
		
	Change
		!include <xbasic.mak>
	To
		include MyProg1.mak
		
	Modify the line
		$(LD) $(LDFLAGS) -out:$(APP).exe $(APP).o appstart.o $(RESOURCES) $(LIBS) $(STDLIBS)
	To
		$(LD) $(LDFLAGS) -out:$(APP).exe $(APP).o appstart.o $(RESOURCES) $(LIBS) $(MYLIB).o $(STDLIBS)

	insert after the line
		$(APP).o: $(APP).s
		
		$(MYLIB).o $(MYLIB).s

	Make the program by using
		make -f MyProg.mak

<h3>Linking C Libraries
	A useful C compiler for Windows can be installed with Visual Studio, where
	the option to install C++ with Visual Studio is selected. The command line
	compiler cl can be accessed via the Visual Studio terminal window, obtained
	via the options Tools/Command Line/Developer Command Prompt.
	
	Similarly if we have a C Library, we create a .dec file for the exported
	functions, but this time we use the term CFUNCTION, ie:
		EXTERNAL CFUNCTION MyCLibFunction(message$)

	Again we compile the C program to 32 bit object code using
		cl /c /EHsc MyCLib.c
	Which produces the file
		MyCLib.obj

	Then include the reference to the assembly code in the .mak file for MyProg, 
	ie after :
		APP = MyProg
	Put
		MYCLIB = MyCLib
		
	Then modify the line
		$(LD) $(LDFLAGS) -out:$(APP).exe $(APP).o appstart.o $(RESOURCES) $(LIBS) $(STDLIBS)
	To
		$(LD) $(LDFLAGS) -out:$(APP).exe $(APP).o appstart.o $(RESOURCES) $(LIBS) $(MYCLIB).obj $(STDLIBS)


	The downside of these approaches is that you have to test the program without
	the PDE. But if you have other language object libraries then this approach
	is available.
	
<h4>Printing to the XBasic Console from C
	To help debug your C Library or for other reasons, it may be useful
	to have C access a function to print to the XBasic console, the following
	is an example. 
	
	Note that using <stdio.h> and printf() in your library code
	won't work as include <stdio.h> causes a linker error with the
	XBasic code.
	
	In the C library file put the reference
		extern XBCPrint(char *message);
		
	In your XBasic program MyProg.x after 
		DECLARE FUNCTION Entry()
	put the lines
		EXPORT
			DECLARE CFUNCTION XBCPrint(XLONG message)
		END EXPORT
		
	Then add the following function to MyProg.x:
		CFUNCTION XBCPrint(XLONG message)
			s$ = CSTRING$(message)
			PRINT s$
		END FUNCTION
		
	You can then use calls such as
		XBCPrint("My Debug Message");
		
	In your C library code.
	
<h2>Compiling Libraries in with XBasic
	The advantage of this approach is that it enables us to test our code in the PDE
	assuming that ALL of the library functions are working.

	First install CygWin and Gnu make, if you have not already done so.
	
	Set the following environment variables
		SET XBDIR=c:\xb   or elsewhere should you so choose
		SET INCLUDE=%XBDIR%\include;%INCLUDE%
		SET LIB=%XBDIR%\lib;%LIB%
		PATH=c:\Program Files (x86)\GnuWin32\bin;%XBDIR%;%XBDIR\bin;%PATH%
	
	Here we use the downloaded version of XBasic, not the installed version in c:\xb.
	We can put our XBasic or C library in say the src\shared directory of the downloaded
	XBasic.
	For XBasic we can then use the Run/Assembler Run/Library menu options. Then
	create a .dec file as explained in the previous section and put this in the src\shared
	directory as well.

	We then modify src/Makefile to include the library, ie: in the section XBLIBOBJS =
	we can add 
		shared/MyLib.o /

	We then remake XBasic as we did initially from the terminal in XBasic
	download directory by using
		make
	From the CygWin Terminal in XBasic download directory
		make install

	Now, when we use the library in the PDE, we need to declare the library functions
	in the Prolog as:
		IMPORT "MyLib"

	We can then use these functions in our program and still test and debug from the
	PDE.
	The disadvantage of this approach is that you have to set-up for your libraries again
	when you have a new version of XBasic available. Although it has to be admitted that
	this eventuality is not likely to arise for quite a long time now (as at 11/Jul/22).

<h1>Using XBasic Source Files Directly
	This approach requires more management but has the advantage of allowing for testing/
	adaptation of the library code in with the user's code. The other disadvantage is
	"cluttering" of the function list viewer in the PDE. This would be dependent on the
	length of your code and that of the library.

	The PDE provides the facility View/Load Function to allow for the use of individual 
	functions held in a repository for example, furthermore the PDE provides the option
	View/Import Function From *.x, which allows you to import functions from an XBasic
	source file.

	However, when you have a library of inter-related functions it is better to use an
	approach like that adopted in XBSourceLib available on GitHub (xbwlteam), in which
	the library function names each begin with a code such as "Ary" or "Msc". This 
	allows the functions to be merged by a utility and keeps them grouped together
	in the PDE function viewer.

